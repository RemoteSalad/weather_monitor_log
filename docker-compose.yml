services:
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: always
    ports:
      - 9090:9090
    volumes:
      - type: bind
        source: ./prom_rules/prometheus.yml #try this non relative ##better not for portability
        target: /etc/prometheus/prometheus.yml
      - type: volume
        source: prometheus_tsdb
        target: /prometheus #this the path inside the container
 
  OWE-Japan:
    image: billykwooten/openweather-exporter
    container_name: OWE-Japan # don't use this field if container is suppsoed to be scaled
    restart: unless-stopped
    # ports:
    #   - 9091:9091  #no need to expose port to host
    env_file: [./openweathermap_api_keys/keys.env, owe.env]
    environment:
      - OW_CITY="Tokyo, JP|Osaka, JP|Fukuoka, JP"
    # secrets: #attempted to use but found blockers due to exporter expecting api be passed as environment variable
    #   - OW_API_key1

  OWE-Taiwan:
    image: billykwooten/openweather-exporter
    container_name: OWE-Taiwan
    restart: unless-stopped
    env_file: [./openweathermap_api_keys/keys.env, owe.env]
    environment:
      - OW_CITY="Taipei, TW| Taichung, TW| Kaohsiung, TW"

  OWE-Korea:
    image: billykwooten/openweather-exporter
    container_name: OWE-Korea
    restart: unless-stopped
    env_file: [./openweathermap_api_keys/keys.env, owe.env]
    environment:
      - OW_CITY="Seoul, SK|Busan, SK|Gyeongju, SK"

# I really do want to make this a declared location on the vm, but I will try letting Docker manage it and see how it feels [JP 2/6]
volumes:
  prometheus_tsdb: #this declaration lets it be used across multiple services; 
    driver: local
# This adds that file to the /run/secrets directory in any designated
# containers. One option is to then add a script to the container so that it loads
# the value of that into environment variables. Using $() statements proved ineffective.
# secrets:
#   OpenWeather_API_key:
#       file: ./openweathermap_api_keys/api_key1